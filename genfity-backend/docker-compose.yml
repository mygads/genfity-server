networks:
  genfity-network:
    external: true

services:
  # Development mode service
  genfity-backend-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: genfity-backend-dev
    environment:
      - NODE_ENV=development
      - PORT=8090
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@genfity-db-postgres:5432/${DB_NAME}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:8090}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8090:8090"
    networks:
      - genfity-network
    depends_on:
      - postgres-setup-dev
    restart: unless-stopped
    volumes:
      - ./:/app
      - backend_node_modules_dev:/app/node_modules
      - /app/.next
    working_dir: /app
    command: npm run dev
    profiles:
      - dev

  # Production mode service
  genfity-backend-prod:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: genfity-backend
    environment:
      - NODE_ENV=production
      - PORT=8090
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@genfity-db-postgres:5432/${DB_NAME}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:8090}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - JWT_SECRET=${JWT_SECRET}
    ports:
      - "8090:8090"
    networks:
      - genfity-network
    depends_on:
      - postgres-setup-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - prod

  # Development postgres setup
  postgres-setup-dev:
    build:
      context: .
      dockerfile: Dockerfile.setup
    container_name: genfity-backend-postgres-setup-dev
    networks:
      - genfity-network
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@genfity-db-postgres:5432/${DB_NAME}
      - PGUSER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - PGHOST=genfity-db-postgres
      - PGPORT=5432
      - PGDATABASE=${DB_NAME}
    volumes:
      - ./:/app
      - backend_node_modules_dev:/app/node_modules
    working_dir: /app
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...'
        until pg_isready -h genfity-db-postgres -p 5432 -U ${DB_USER}; do
          echo 'PostgreSQL is not ready - waiting...'
          sleep 2
        done
        echo 'PostgreSQL is ready!'
        echo 'Installing dependencies...'
        npm ci
        echo 'Generating Prisma client...'
        npx prisma generate
        echo 'Running Prisma migrations...'
        npx prisma migrate deploy
        echo 'Development setup complete!'
      "
    restart: "no"
    profiles:
      - dev

  # Production postgres setup
  postgres-setup-prod:
    build:
      context: .
      dockerfile: Dockerfile.setup
    container_name: genfity-backend-postgres-setup-prod
    networks:
      - genfity-network
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@genfity-db-postgres:5432/${DB_NAME}
      - PGUSER=${DB_USER}
      - PGPASSWORD=${DB_PASSWORD}
      - PGHOST=genfity-db-postgres
      - PGPORT=5432
      - PGDATABASE=${DB_NAME}
    volumes:
      - ./:/app
      - backend_node_modules_prod:/app/node_modules
    working_dir: /app
    command: >
      sh -c "
        echo 'Waiting for PostgreSQL to be ready...'
        until pg_isready -h genfity-db-postgres -p 5432 -U ${DB_USER}; do
          echo 'PostgreSQL is not ready - waiting...'
          sleep 2
        done
        echo 'PostgreSQL is ready!'
        echo 'Installing dependencies...'
        npm ci
        echo 'Generating Prisma client...'
        npx prisma generate
        echo 'Running Prisma migrations...'
        npx prisma migrate deploy
        echo 'Production setup complete!'
      "
    restart: "no"
    profiles:
      - prod

volumes:
  backend_node_modules_dev:
  backend_node_modules_prod:

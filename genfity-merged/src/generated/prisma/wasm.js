
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  otp: 'otp',
  otpExpires: 'otpExpires',
  otpVerificationDeadline: 'otpVerificationDeadline',
  emailVerified: 'emailVerified',
  phoneVerified: 'phoneVerified',
  image: 'image',
  emailVerificationToken: 'emailVerificationToken',
  emailVerificationTokenExpires: 'emailVerificationTokenExpires',
  role: 'role',
  apiKey: 'apiKey',
  updatedAt: 'updatedAt',
  emailOtp: 'emailOtp',
  emailOtpExpires: 'emailOtpExpires',
  resetPasswordOtp: 'resetPasswordOtp',
  resetPasswordOtpExpires: 'resetPasswordOtpExpires',
  resetPasswordLastRequestAt: 'resetPasswordLastRequestAt',
  ssoOtp: 'ssoOtp',
  ssoOtpExpires: 'ssoOtpExpires',
  ssoLastRequestAt: 'ssoLastRequestAt',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.FeatureScalarFieldEnum = {
  id: 'id',
  name_en: 'name_en',
  name_id: 'name_id',
  included: 'included',
  packageId: 'packageId'
};

exports.Prisma.SubcategoryScalarFieldEnum = {
  id: 'id',
  name_en: 'name_en',
  name_id: 'name_id',
  categoryId: 'categoryId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name_en: 'name_en',
  name_id: 'name_id',
  icon: 'icon'
};

exports.Prisma.AddonScalarFieldEnum = {
  id: 'id',
  name_en: 'name_en',
  name_id: 'name_id',
  description_en: 'description_en',
  description_id: 'description_id',
  price_idr: 'price_idr',
  price_usd: 'price_usd',
  image: 'image',
  categoryId: 'categoryId'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  name_en: 'name_en',
  name_id: 'name_id',
  description_en: 'description_en',
  description_id: 'description_id',
  price_idr: 'price_idr',
  price_usd: 'price_usd',
  image: 'image',
  categoryId: 'categoryId',
  subcategoryId: 'subcategoryId',
  popular: 'popular'
};

exports.Prisma.WhatsAppSessionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  status: 'status',
  qr: 'qr',
  isNotification: 'isNotification',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  aiConfig: 'aiConfig',
  message: 'message',
  sessionName: 'sessionName',
  isTerminated: 'isTerminated'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  transactionDate: 'transactionDate',
  status: 'status',
  amount: 'amount',
  createdAt: 'createdAt',
  type: 'type',
  updatedAt: 'updatedAt',
  discountAmount: 'discountAmount',
  originalAmount: 'originalAmount',
  voucherId: 'voucherId',
  notes: 'notes',
  currency: 'currency',
  finalAmount: 'finalAmount',
  serviceFeeAmount: 'serviceFeeAmount',
  totalAfterDiscount: 'totalAfterDiscount',
  expiresAt: 'expiresAt'
};

exports.Prisma.TransactionProductScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  packageId: 'packageId',
  quantity: 'quantity',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate',
  referenceLink: 'referenceLink'
};

exports.Prisma.TransactionAddonsScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  addonId: 'addonId',
  quantity: 'quantity',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.TransactionWhatsappServiceScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  whatsappPackageId: 'whatsappPackageId',
  duration: 'duration',
  status: 'status',
  startDate: 'startDate',
  endDate: 'endDate'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  amount: 'amount',
  method: 'method',
  status: 'status',
  paymentDate: 'paymentDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  expiresAt: 'expiresAt',
  externalId: 'externalId',
  paymentUrl: 'paymentUrl',
  serviceFee: 'serviceFee',
  adminNotes: 'adminNotes',
  adminAction: 'adminAction',
  adminUserId: 'adminUserId',
  actionDate: 'actionDate'
};

exports.Prisma.WhatsappApiPackageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  priceMonth: 'priceMonth',
  priceYear: 'priceYear',
  maxSession: 'maxSession',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServicesWhatsappCustomersScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  customerId: 'customerId',
  packageId: 'packageId',
  sessionId: 'sessionId',
  qrCode: 'qrCode',
  status: 'status',
  expiredAt: 'expiredAt',
  activatedAt: 'activatedAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSessionScalarFieldEnum = {
  userId: 'userId',
  token: 'token',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  isActive: 'isActive',
  lastUsed: 'lastUsed',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  id: 'id'
};

exports.Prisma.VoucherScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  type: 'type',
  discountType: 'discountType',
  value: 'value',
  minAmount: 'minAmount',
  maxDiscount: 'maxDiscount',
  maxUses: 'maxUses',
  usedCount: 'usedCount',
  allowMultipleUsePerUser: 'allowMultipleUsePerUser',
  isActive: 'isActive',
  startDate: 'startDate',
  endDate: 'endDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VoucherUsageScalarFieldEnum = {
  id: 'id',
  voucherId: 'voucherId',
  userId: 'userId',
  transactionId: 'transactionId',
  usedAt: 'usedAt',
  discountAmount: 'discountAmount'
};

exports.Prisma.ServicesProductCustomersScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  customerId: 'customerId',
  packageId: 'packageId',
  quantity: 'quantity',
  websiteUrl: 'websiteUrl',
  driveUrl: 'driveUrl',
  textDescription: 'textDescription',
  domainName: 'domainName',
  domainExpiredAt: 'domainExpiredAt',
  fileAssets: 'fileAssets',
  status: 'status',
  deliveredAt: 'deliveredAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServicesAddonsCustomersScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  customerId: 'customerId',
  addonDetails: 'addonDetails',
  driveUrl: 'driveUrl',
  fileAssets: 'fileAssets',
  status: 'status',
  deliveredAt: 'deliveredAt',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceFeeScalarFieldEnum = {
  id: 'id',
  paymentMethod: 'paymentMethod',
  name: 'name',
  type: 'type',
  value: 'value',
  minFee: 'minFee',
  maxFee: 'maxFee',
  isActive: 'isActive',
  requiresManualApproval: 'requiresManualApproval',
  paymentInstructions: 'paymentInstructions',
  instructionType: 'instructionType',
  instructionImageUrl: 'instructionImageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currency: 'currency'
};

exports.Prisma.BankDetailScalarFieldEnum = {
  id: 'id',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  accountName: 'accountName',
  swiftCode: 'swiftCode',
  currency: 'currency',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServerScalarFieldEnum = {
  id: 'id',
  dropletId: 'dropletId',
  name: 'name',
  memory: 'memory',
  vcpus: 'vcpus',
  disk: 'disk',
  status: 'status',
  region: 'region',
  regionSlug: 'regionSlug',
  sizeSlug: 'sizeSlug',
  publicIp: 'publicIp',
  privateIp: 'privateIp',
  priceMonthly: 'priceMonthly',
  priceHourly: 'priceHourly',
  tags: 'tags',
  features: 'features',
  imageDistribution: 'imageDistribution',
  imageName: 'imageName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WhatsAppMessageStatsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionId: 'sessionId',
  totalMessagesSent: 'totalMessagesSent',
  totalMessagesFailed: 'totalMessagesFailed',
  lastMessageSentAt: 'lastMessageSentAt',
  lastMessageFailedAt: 'lastMessageFailedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Feature: 'Feature',
  Subcategory: 'Subcategory',
  Category: 'Category',
  Addon: 'Addon',
  Package: 'Package',
  WhatsAppSession: 'WhatsAppSession',
  Transaction: 'Transaction',
  TransactionProduct: 'TransactionProduct',
  TransactionAddons: 'TransactionAddons',
  TransactionWhatsappService: 'TransactionWhatsappService',
  Payment: 'Payment',
  WhatsappApiPackage: 'WhatsappApiPackage',
  ServicesWhatsappCustomers: 'ServicesWhatsappCustomers',
  UserSession: 'UserSession',
  Voucher: 'Voucher',
  VoucherUsage: 'VoucherUsage',
  ServicesProductCustomers: 'ServicesProductCustomers',
  ServicesAddonsCustomers: 'ServicesAddonsCustomers',
  ServiceFee: 'ServiceFee',
  BankDetail: 'BankDetail',
  Server: 'Server',
  WhatsAppMessageStats: 'WhatsAppMessageStats'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
